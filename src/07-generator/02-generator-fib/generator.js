/*
Generator Function
- A generator function is a special type of function that can pause its execution and yield control back to the caller. 
- When a generator function is called, it returns an iterator object that can be used to iterate over the values produced by the generator function.
- Generator functions are defined using the function* syntax, which is similar to the function keyword but with an asterisk (*) after the function keyword.
*/


// Example 2: Using a generator function to generate Fibonacci numbers
function* fibonacci() {
  let a = 0;
  let b = 1;

  while (true) {
    yield a;
    [a, b] = [b, a + b];
  }
}    

// Create a generator object  
// Explanation: The fibonacci generator function generates an infinite sequence of Fibonacci numbers.
// The generator object fib is created by calling the fibonacci generator function.
// The first 10 Fibonacci numbers are generated by calling the next method on the generator object 10 times.
// The value property of the object returned by the next method contains the generated Fibonacci number.
// The done property of the object returned by the next method is false as long as the generator function is not finished.
// The generator function is an infinite loop, so it never finishes.
// The generator object can be used to generate an infinite sequence of Fibonacci numbers by calling the next method repeatedly.
// The generator function is paused and resumed automatically by the JavaScript runtime when the next method is called.
// The generator function is paused when a yield statement is encountered and resumed when the next method is called again.
// The generator function can be used to generate an infinite sequence of values without consuming a lot of memory. 

// const generateFibonacci = () => {
//  console.log('\nFibonacci Sequence:');
//  const fib = fibonacci();

// // Generate the first 10 Fibonacci numbers
//  for (let i = 0; i < 10; i++) {
//    console.log(fib.next().value);
//  }

// }

// generateFibonacci();

// Example 3: Using a generator function to implement a range function
function* range(start, end, step = 1) {
  for (let i = start; i <= end; i += step) {
    yield i;
  }
}

// Create a generator object
// const generateRange = () => {
//   console.log('\nRange: 1 to 10');
//   // rangeGenerator is a generator object that generates the numbers from 1 to 10 with a step of 2.
//   // range(1, 10, 2) returns a generator object that generates the numbers from 1 to 10 with a step of 2.
//   const rangeGenerator = range(1, 10, 2);

//   // Iterate over the values produced by the generator
//   for (const value of rangeGenerator) {
//     console.log(value);
//   }
// }

// generateRange();

module.exports = fibonacci// Do not remove. This allows the function to be imported by other modules
 

